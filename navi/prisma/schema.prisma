generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  username               String                  @unique
  email                  String                  @unique
  password               String
  firstname              String?
  lastname               String?
  credits                Float                   @default(0) // ⭐ USER gets the credits
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  verified               Boolean                 @default(false)
  AccountLinkRequest     AccountLinkRequest[]
  admins                 Admin?                  @relation("UserAdmin")
  chattieCoachsCreated   ChattieCoach[]          @relation("UserChattieCoachCreator")
  invoices               Invoice[] // ⭐ USER receives credits from invoices
  knowledgeBaseResponses KnowledgeBaseResponse[]
  oauths                 OAuth[]                 @relation("UserOAuth")
  onboardings            Onboarding[]            @relation("UserOnboarding")
  paymentMethods         PaymentMethod[]
  subscriptions          Subscription[] // ⭐ USER-BASED: User has subscriptions
  Transaction            Transaction[]
  accounts               UserAccount[]
  verificationTokens     VerificationToken[]
}

model Account {
  id                     Int                     @id @default(autoincrement())
  name                   String
  description            String?
  type                   String                  @default("personal")
  setup                  Boolean                 @default(false)
  stripCustomerId        String? // ⭐ ACCOUNT handles billing/payments
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  AccountLinkRequest     AccountLinkRequest[]
  chatThreads            ChatThread[]
  chattieCoachs          ChattieCoach[]
  chatties               ChattieSettings[]
  Invoice                Invoice[] // ⭐ ACCOUNT gets billed
  knowledgeBaseResponses KnowledgeBaseResponse[]
  paymentMethods         PaymentMethod[]
  subscriptions          Subscription[] // ⭐ ACCOUNT handles billing for user subscriptions
  Transaction            Transaction[]
  users                  UserAccount[]
}

model UserAccount {
  userId     Int
  accountId  Int
  role       String
  id         Int          @id @default(autoincrement())
  account    Account      @relation(fields: [accountId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  UserAssets UserAssets[]

  @@unique([userId, accountId])
}

model UserAssets {
  id            Int         @id @default(autoincrement())
  userAccountId Int
  agentId       Int
  key           String
  type          String
  prompt        String?
  source        String
  status        String
  metadata      String?
  generatedBy   String?
  publishedBy   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  deletedAt     DateTime?
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  type      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Resume {
  id        Int      @id @default(autoincrement())
  userId    Int
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
}

model Email {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  body      String
  status    String   @default("queued")
  createdAt DateTime @default(now())
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  role      String   @default("admin")
  createdAt DateTime @default(now())
  user      User     @relation("UserAdmin", fields: [userId], references: [id])
}

model OAuth {
  id         Int      @id @default(autoincrement())
  userId     Int
  provider   String
  providerId String   @unique
  email      String
  createdAt  DateTime @default(now())
  user       User     @relation("UserOAuth", fields: [userId], references: [id])
}

model Onboarding {
  id        Int      @id @default(autoincrement())
  userId    Int
  step      String
  completed Boolean
  createdAt DateTime @default(now())
  user      User     @relation("UserOnboarding", fields: [userId], references: [id])
}

model ChatThread {
  id           Int          @id @default(autoincrement())
  accountId    Int
  userId       Int
  title        String?
  companyShare Boolean      @default(false)
  publicShare  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  coachId      Int          @default(0)
  chats        Chat[]
  summary      ChatSummary?
  account      Account      @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([userId])
}

model Chat {
  id           Int        @id @default(autoincrement())
  chatThreadId Int
  role         String
  content      String
  createdAt    DateTime   @default(now())
  chatThread   ChatThread @relation(fields: [chatThreadId], references: [id])

  @@index([chatThreadId])
}

model ChatSummary {
  id           Int        @id @default(autoincrement())
  chatThreadId Int        @unique
  summary      String
  updatedAt    DateTime   @updatedAt
  chatThread   ChatThread @relation(fields: [chatThreadId], references: [id])
}

model ChattieSettings {
  id                  Int      @id @default(autoincrement())
  accountId           Int
  position            String
  widgetTitle         String
  welcomeMessage      String
  callToActionMessage String
  appearOn            String
  fallbackMessage     String
  avatar              String
  theme               String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  account             Account  @relation(fields: [accountId], references: [id])
}

model KnowledgeBaseQuestion {
  id        Int                     @id @default(autoincrement())
  text      String
  type      String
  options   Json?
  order     Int
  purpose   String
  createdAt DateTime                @default(now())
  field     String?
  responses KnowledgeBaseResponse[]
}

model KnowledgeBaseResponse {
  id         Int                   @id @default(autoincrement())
  userId     Int
  accountId  Int
  questionId Int
  response   String
  createdAt  DateTime              @default(now())
  account    Account               @relation(fields: [accountId], references: [id])
  question   KnowledgeBaseQuestion @relation(fields: [questionId], references: [id])
  user       User                  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([questionId])
}

model PricingPlan {
  id              String        @id
  title           String
  price           Int
  credits         Float
  description     String
  buttonText      String        @default("Subscribe")
  href            String        @default("#")
  billing         String        @default("/month")
  popular         Boolean       @default(false)
  category        String        @default("personal")
  isActive        Boolean       @default(true)
  stripeProductId String?       @unique
  stripePriceId   String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  features        PlanFeature[]
}

model PlanFeature {
  name          String
  description   String?
  included      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  id            Int         @id @default(autoincrement())
  pricingPlanId String
  pricingPlan   PricingPlan @relation(fields: [pricingPlanId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  userId               Int // ⭐ REQUIRED - WHO subscribes (USER-BASED)
  accountId            Int // ⭐ REQUIRED - WHERE billing happens & credits go
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String? // Should match Account.stripCustomerId
  stripePriceId        String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  status               SubscriptionStatus @default(ACTIVE)
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // ⭐ USER-BASED: User subscribes, Account gets billed & receives credits
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model ChattieCoach {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique
  category      String
  aiModel       String          @default("gpt-4.0")
  basePrompt    String
  expert        String?
  image         String?
  visible       Boolean         @default(false)
  favorite      Boolean         @default(false)
  shared        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  accountId     Int
  createdBy     Int
  content       String?
  account       Account         @relation(fields: [accountId], references: [id])
  creator       User            @relation("UserChattieCoachCreator", fields: [createdBy], references: [id])
  CoachPinecone CoachPinecone[]
}

model CoachTemplate {
  id         Int      @id @default(autoincrement())
  name       String
  category   String
  aiModel    String   @default("gpt-4.0")
  basePrompt String
  expert     String?
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ChatExpert {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AIEngine {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        String
  snapshot    String
  description String?
  cost        Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Agent {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  slug          String          @unique
  description   String
  displayOrder  Int             @default(0)
  status        String          @default("coming_soon")
  releaseDate   DateTime
  imageUrl      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      String
  tagline       String
  tagname       String
  videoUrl      String?
  AgentFeatures AgentFeatures[]
  Transaction   Transaction[]
}

model Invoice {
  id                    Int       @id @default(autoincrement())
  accountId             Int // ⭐ ACCOUNT gets billed
  userId                Int? // ⭐ USER gets the credits (optional for legacy invoices)
  subscriptionId        String?
  stripeInvoiceId       String    @unique
  stripePaymentIntentId String? // ⭐ For credit purchases via Payment Intents
  amountDue             Float
  amountPaid            Float
  currency              String    @default("usd")
  status                String
  dueDate               DateTime?
  paidAt                DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  account Account @relation(fields: [accountId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model AccountLinkRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  accountId Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime
  Account   Account  @relation(fields: [accountId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model AgentFeatures {
  id        Int      @id @default(autoincrement())
  agentId   Int
  feature   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Agent     Agent    @relation(fields: [agentId], references: [id])
}

model CoachPinecone {
  id           Int          @id @default(autoincrement())
  pindex       String       @unique
  pnamespace   String
  coachId      Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  ChattieCoach ChattieCoach @relation(fields: [coachId], references: [id])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  accountId       Int
  snapshotId      Int
  agentId         Int
  itemCount       Int
  itemType        String
  credits         Float
  transactionDate DateTime @default(now())
  createdAt       DateTime @default(now())
  Account         Account  @relation(fields: [accountId], references: [id])
  Agent           Agent    @relation(fields: [agentId], references: [id])
  User            User     @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id                    Int       @id @default(autoincrement())
  userId                Int
  accountId             Int? // Optional: link to specific account
  brand                 String // Visa, Mastercard, PayPal, etc.
  logo                  String? // URL to brand logo
  number                String // Masked card number (e.g., "****1234")
  expiry                String? // MM/YY format
  cardholderName        String?
  isDefault             Boolean   @default(false)
  paymentMethod         String // 'card', 'paypal', 'bank'
  status                String    @default("active") // 'active', 'expired', 'suspended'
  lastUsed              DateTime?
  securityFeatures      String[] // Array of security features
  stripePaymentMethodId String? // Link to Stripe payment method

  // Additional fields for different payment types
  bankName      String? // For bank accounts
  accountNumber String? // For bank accounts (masked)
  routingNumber String? // For bank accounts
  email         String? // For PayPal
  zipCode       String? // For cards
  country       String? // For cards

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([stripePaymentMethodId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}
